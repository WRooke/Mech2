/*  Exercise 2: This exercise is to pulse the built in LED at a frequency of 1Hz (1s).   You will need to utilise Exercise 1 code and integrate a Timer module to control the pulse rate  For this exercise you cannot use the Arduino standard library.   Code written by:          Member 1 SID xxxxxxxx          Member 2 SID xxxxxxxx          Member 3 SID xxxxxxxx  Version: x.xx   Date: xx/xx/xxxx*/#include <xxxxxx.h> //Include the standard library required for programming the avr microprocessor/*   This exercise is an addon to the Exercise 1 code, it would be a good idea to copy the exercise 1  code into this exercise. Then you will need to refer to the data sheet for the Timer modules.  You can choose between 8-bit Timer0{This one behaves oddly so don't use it} and Timer2, or the 16-bit Timer1. Then you need to read the  modes of operations to decide which mode you would like to use (I would recommended normal mode)  Then you will need to calculate the configuration values. You can choose to do this as polling  or interrupt driven system. The scaffold will be for polling but you can adapt this into an  interrupt driven system.*/  void setup() {      /*      What is the onboard clock frequency?      Use this equation to figure out how many clock ticks required for your period based      your desired time: TimerCountsRequired=[ (clockI/Ospeed / Prescaler) * Desiredtime ] - 1      Hint: An 8-bit Timer has a maximum size of 255 ticks, a 16-bit Timer has a max size 65535    */    //<-------- Don't for get to set data direction register    //<-------- Here, set Timer control register A for the mode of operation you want to use.    //<-------- Here, set control register B for more operation and the prescaler values.}void loop() {    /*      In this section you have to have a condition that check the amount of counter ticks      that has passed. You can do this by checking the Counter Value Register which is an      8 bit register reflecting the current counter value       Hint use if condition -> TCNTx>=TimerCountsRequired            If using 8-bit timer consider using running through more than one counter cycle as the             If this condition you will need to toggle the LED pin at the end of the desired       period. Hint: To toggle a bit you can use PORT?^=(1<<P??)      Don't forget to reset the counter value register.    */      }